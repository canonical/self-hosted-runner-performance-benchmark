on:
  workflow_call:

jobs:
  run:
    inputs:
      runs-on-hosted:
        type: string
        description: Whether to use self or GitHub hosted runners, either use ubuntu-latest for GitHub hosted or self-hosted
      runs-on-architecture:
        type: string
        description: The architecture to use, either x64, amd64 or arm64
    runs-on: [${{ inputs.runs-on-hosted }}, ${{ inputs.runs-on-architecture }}]
    env:
      RUN_NAME: ${{ format('${0}-${1}', inputs.runs-on-hosted, inputs.runs-on-architecture) }}
    steps:
      - run: sudo apt-get update
        if: ${{ always() && !cancelled() }}
      - name: Download charmhub resource test
        if: ${{ always() && !cancelled() }}
        id: charmhub-resource-download
        run: |
          python3 -c 'from urllib.request import Request, urlopen; from pathlib import Path; Path("image_location.json").write_bytes(urlopen("https://api.charmhub.io/api/v1/resources/download/charm_18zuSzvljyQo6mJMWjcjN2nMm1TiWKCF.indico-image_179").read())'
          export INDICO_IMAGE_NAME=($(jq -r '.ImageName' image_location.json))
          export CHARMHUB_REGISTRY_USERNAME=($(jq -r '.Username' image_location.json))
          export CHARMHUB_REGISTRY_PASSWORD=($(jq -r '.Password' image_location.json))
          sudo apt-get -y install skopeo
          sudo skopeo login registry.jujucharms.com -u $CHARMHUB_REGISTRY_USERNAME -p $CHARMHUB_REGISTRY_PASSWORD
          for ((i=0; i<3; i++)); do
            /usr/bin/time -o temp_time.txt -f %e sudo skopeo copy docker://$INDICO_IMAGE_NAME docker-archive:./indico_image.tar
            cat temp_time.txt >> time.txt
            rm -f ./indico_image.tar temp_time.txt
          done
          sleep 1
          python3 -c "import pathlib; import statistics; (pathlib.Path() / 'mean_time.txt').write_text(str(statistics.mean(map(float, (pathlib.Path() / 'time.txt').read_text().splitlines()))))"
          cat mean_time.txt
          echo "result=$(cat mean_time.txt)" >> $GITHUB_OUTPUT
          rm time.txt mean_time.txt
      - name: Checkout GitHub pages
        uses: actions/checkout@v4
        if: ${{ always() && !cancelled() }}
        with:
          ref: gh-pages
      - name: prepare dir
        if: ${{ always() && !cancelled() }}
        run: |
          mkdir -p results/v1/
          test -f results/v1/$RUN_NAME.csv || echo "time,charmhub resource download," > results/v1/$RUN_NAME.csv
      - name: Write results
        if: ${{ always() && !cancelled() }}
        env:
          CHARMHUB_RESOURCE_DOWNLOAD: ${{ steps.charmhub-resource-download.outputs.result }}
        run: |
          echo $CHARMHUB_RESOURCE_DOWNLOAD
          echo $(TZ=UTC date +"%Y-%m-%dT%H:%M:%S%z"),$CHARMHUB_RESOURCE_DOWNLOAD, >> results/v1/$RUN_NAME.csv
      - name: Publish
        if: ${{ always() && !cancelled() }}
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
